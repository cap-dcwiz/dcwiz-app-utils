name: Version Check

on:
  pull_request:
    branches:
      - main
      - ci/jy-security-scan
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - '.github/**'
      - 'docs/**'

jobs:
  check-version:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
        id: base

      - name: Set up Python for base branch
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Poetry for base branch
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Get poetry version from base branch
        run: |
          base_poetry_version=$(python3 -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "base_poetry_version=$base_poetry_version" >> $GITHUB_ENV
        id: base_poetry_version
        shell: bash

      - name: Checkout head branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
        id: head

      - name: Set up Python for head branch
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Poetry for head branch
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Get poetry version from head branch
        run: |
          head_poetry_version=$(python3 -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "head_poetry_version=$head_poetry_version" >> $GITHUB_ENV
        id: head_poetry_version
        shell: bash

      - name: Compare Poetry versions
        env:
          BASE_POETRY_VERSION: ${{ env.base_poetry_version }}
          HEAD_POETRY_VERSION: ${{ env.head_poetry_version }}
        run: |
          BASE_POETRY_VERSION=${{ env.BASE_POETRY_VERSION }}
          HEAD_POETRY_VERSION=${{ env.HEAD_POETRY_VERSION }}
          if [ "$BASE_POETRY_VERSION" == "$HEAD_POETRY_VERSION" ]; then
            echo "Merging version $HEAD_POETRY_VERSION to $BASE_POETRY_VERSION"
            echo "Poetry version has not been updated in pyproject.toml"
            exit 1 # This will cause the workflow to fail
          else
            echo "Merging version $HEAD_POETRY_VERSION to $BASE_POETRY_VERSION"
            echo "Poetry version has been updated in pyproject.toml"
          fi